/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `OrderProducts` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums";
import type * as Prisma from "../internal/prismaNamespace";

/**
 * Model OrderProducts
 *
 */
export type OrderProductsModel =
  runtime.Types.Result.DefaultSelection<Prisma.$OrderProductsPayload>;

export type AggregateOrderProducts = {
  _count: OrderProductsCountAggregateOutputType | null;
  _avg: OrderProductsAvgAggregateOutputType | null;
  _sum: OrderProductsSumAggregateOutputType | null;
  _min: OrderProductsMinAggregateOutputType | null;
  _max: OrderProductsMaxAggregateOutputType | null;
};

export type OrderProductsAvgAggregateOutputType = {
  id: number | null;
  orderId: number | null;
  productId: number | null;
  quantity: number | null;
};

export type OrderProductsSumAggregateOutputType = {
  id: number | null;
  orderId: number | null;
  productId: number | null;
  quantity: number | null;
};

export type OrderProductsMinAggregateOutputType = {
  id: number | null;
  orderId: number | null;
  productId: number | null;
  quantity: number | null;
};

export type OrderProductsMaxAggregateOutputType = {
  id: number | null;
  orderId: number | null;
  productId: number | null;
  quantity: number | null;
};

export type OrderProductsCountAggregateOutputType = {
  id: number;
  orderId: number;
  productId: number;
  quantity: number;
  _all: number;
};

export type OrderProductsAvgAggregateInputType = {
  id?: true;
  orderId?: true;
  productId?: true;
  quantity?: true;
};

export type OrderProductsSumAggregateInputType = {
  id?: true;
  orderId?: true;
  productId?: true;
  quantity?: true;
};

export type OrderProductsMinAggregateInputType = {
  id?: true;
  orderId?: true;
  productId?: true;
  quantity?: true;
};

export type OrderProductsMaxAggregateInputType = {
  id?: true;
  orderId?: true;
  productId?: true;
  quantity?: true;
};

export type OrderProductsCountAggregateInputType = {
  id?: true;
  orderId?: true;
  productId?: true;
  quantity?: true;
  _all?: true;
};

export type OrderProductsAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which OrderProducts to aggregate.
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?:
    | Prisma.OrderProductsOrderByWithRelationInput
    | Prisma.OrderProductsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.OrderProductsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrderProducts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned OrderProducts
   **/
  _count?: true | OrderProductsCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: OrderProductsAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: OrderProductsSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: OrderProductsMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: OrderProductsMaxAggregateInputType;
};

export type GetOrderProductsAggregateType<
  T extends OrderProductsAggregateArgs,
> = {
  [P in keyof T & keyof AggregateOrderProducts]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrderProducts[P]>
    : Prisma.GetScalarType<T[P], AggregateOrderProducts[P]>;
};

export type OrderProductsGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.OrderProductsWhereInput;
  orderBy?:
    | Prisma.OrderProductsOrderByWithAggregationInput
    | Prisma.OrderProductsOrderByWithAggregationInput[];
  by:
    | Prisma.OrderProductsScalarFieldEnum[]
    | Prisma.OrderProductsScalarFieldEnum;
  having?: Prisma.OrderProductsScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: OrderProductsCountAggregateInputType | true;
  _avg?: OrderProductsAvgAggregateInputType;
  _sum?: OrderProductsSumAggregateInputType;
  _min?: OrderProductsMinAggregateInputType;
  _max?: OrderProductsMaxAggregateInputType;
};

export type OrderProductsGroupByOutputType = {
  id: number;
  orderId: number;
  productId: number;
  quantity: number;
  _count: OrderProductsCountAggregateOutputType | null;
  _avg: OrderProductsAvgAggregateOutputType | null;
  _sum: OrderProductsSumAggregateOutputType | null;
  _min: OrderProductsMinAggregateOutputType | null;
  _max: OrderProductsMaxAggregateOutputType | null;
};

type GetOrderProductsGroupByPayload<T extends OrderProductsGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<OrderProductsGroupByOutputType, T["by"]> & {
        [P in keyof T &
          keyof OrderProductsGroupByOutputType]: P extends "_count"
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrderProductsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrderProductsGroupByOutputType[P]>;
      }
    >
  >;

export type OrderProductsWhereInput = {
  AND?: Prisma.OrderProductsWhereInput | Prisma.OrderProductsWhereInput[];
  OR?: Prisma.OrderProductsWhereInput[];
  NOT?: Prisma.OrderProductsWhereInput | Prisma.OrderProductsWhereInput[];
  id?: Prisma.IntFilter<"OrderProducts"> | number;
  orderId?: Prisma.IntFilter<"OrderProducts"> | number;
  productId?: Prisma.IntFilter<"OrderProducts"> | number;
  quantity?: Prisma.IntFilter<"OrderProducts"> | number;
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>;
  product?: Prisma.XOR<
    Prisma.ProductScalarRelationFilter,
    Prisma.ProductWhereInput
  >;
};

export type OrderProductsOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  order?: Prisma.OrderOrderByWithRelationInput;
  product?: Prisma.ProductOrderByWithRelationInput;
};

export type OrderProductsWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.OrderProductsWhereInput | Prisma.OrderProductsWhereInput[];
    OR?: Prisma.OrderProductsWhereInput[];
    NOT?: Prisma.OrderProductsWhereInput | Prisma.OrderProductsWhereInput[];
    orderId?: Prisma.IntFilter<"OrderProducts"> | number;
    productId?: Prisma.IntFilter<"OrderProducts"> | number;
    quantity?: Prisma.IntFilter<"OrderProducts"> | number;
    order?: Prisma.XOR<
      Prisma.OrderScalarRelationFilter,
      Prisma.OrderWhereInput
    >;
    product?: Prisma.XOR<
      Prisma.ProductScalarRelationFilter,
      Prisma.ProductWhereInput
    >;
  },
  "id"
>;

export type OrderProductsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
  _count?: Prisma.OrderProductsCountOrderByAggregateInput;
  _avg?: Prisma.OrderProductsAvgOrderByAggregateInput;
  _max?: Prisma.OrderProductsMaxOrderByAggregateInput;
  _min?: Prisma.OrderProductsMinOrderByAggregateInput;
  _sum?: Prisma.OrderProductsSumOrderByAggregateInput;
};

export type OrderProductsScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.OrderProductsScalarWhereWithAggregatesInput
    | Prisma.OrderProductsScalarWhereWithAggregatesInput[];
  OR?: Prisma.OrderProductsScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.OrderProductsScalarWhereWithAggregatesInput
    | Prisma.OrderProductsScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<"OrderProducts"> | number;
  orderId?: Prisma.IntWithAggregatesFilter<"OrderProducts"> | number;
  productId?: Prisma.IntWithAggregatesFilter<"OrderProducts"> | number;
  quantity?: Prisma.IntWithAggregatesFilter<"OrderProducts"> | number;
};

export type OrderProductsCreateInput = {
  quantity: number;
  order: Prisma.OrderCreateNestedOneWithoutOrderProductsInput;
  product: Prisma.ProductCreateNestedOneWithoutOrderProductsInput;
};

export type OrderProductsUncheckedCreateInput = {
  id?: number;
  orderId: number;
  productId: number;
  quantity: number;
};

export type OrderProductsUpdateInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  order?: Prisma.OrderUpdateOneRequiredWithoutOrderProductsNestedInput;
  product?: Prisma.ProductUpdateOneRequiredWithoutOrderProductsNestedInput;
};

export type OrderProductsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  orderId?: Prisma.IntFieldUpdateOperationsInput | number;
  productId?: Prisma.IntFieldUpdateOperationsInput | number;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsCreateManyInput = {
  id?: number;
  orderId: number;
  productId: number;
  quantity: number;
};

export type OrderProductsUpdateManyMutationInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  orderId?: Prisma.IntFieldUpdateOperationsInput | number;
  productId?: Prisma.IntFieldUpdateOperationsInput | number;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsListRelationFilter = {
  every?: Prisma.OrderProductsWhereInput;
  some?: Prisma.OrderProductsWhereInput;
  none?: Prisma.OrderProductsWhereInput;
};

export type OrderProductsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type OrderProductsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
};

export type OrderProductsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
};

export type OrderProductsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
};

export type OrderProductsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
};

export type OrderProductsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  orderId?: Prisma.SortOrder;
  productId?: Prisma.SortOrder;
  quantity?: Prisma.SortOrder;
};

export type OrderProductsCreateNestedManyWithoutProductInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutProductInput,
        Prisma.OrderProductsUncheckedCreateWithoutProductInput
      >
    | Prisma.OrderProductsCreateWithoutProductInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutProductInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput[];
  createMany?: Prisma.OrderProductsCreateManyProductInputEnvelope;
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
};

export type OrderProductsUncheckedCreateNestedManyWithoutProductInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutProductInput,
        Prisma.OrderProductsUncheckedCreateWithoutProductInput
      >
    | Prisma.OrderProductsCreateWithoutProductInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutProductInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput[];
  createMany?: Prisma.OrderProductsCreateManyProductInputEnvelope;
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
};

export type OrderProductsUpdateManyWithoutProductNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutProductInput,
        Prisma.OrderProductsUncheckedCreateWithoutProductInput
      >
    | Prisma.OrderProductsCreateWithoutProductInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutProductInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput[];
  upsert?:
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutProductInput
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutProductInput[];
  createMany?: Prisma.OrderProductsCreateManyProductInputEnvelope;
  set?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  disconnect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  delete?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  update?:
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutProductInput
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutProductInput[];
  updateMany?:
    | Prisma.OrderProductsUpdateManyWithWhereWithoutProductInput
    | Prisma.OrderProductsUpdateManyWithWhereWithoutProductInput[];
  deleteMany?:
    | Prisma.OrderProductsScalarWhereInput
    | Prisma.OrderProductsScalarWhereInput[];
};

export type OrderProductsUncheckedUpdateManyWithoutProductNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutProductInput,
        Prisma.OrderProductsUncheckedCreateWithoutProductInput
      >
    | Prisma.OrderProductsCreateWithoutProductInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutProductInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput
    | Prisma.OrderProductsCreateOrConnectWithoutProductInput[];
  upsert?:
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutProductInput
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutProductInput[];
  createMany?: Prisma.OrderProductsCreateManyProductInputEnvelope;
  set?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  disconnect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  delete?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  update?:
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutProductInput
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutProductInput[];
  updateMany?:
    | Prisma.OrderProductsUpdateManyWithWhereWithoutProductInput
    | Prisma.OrderProductsUpdateManyWithWhereWithoutProductInput[];
  deleteMany?:
    | Prisma.OrderProductsScalarWhereInput
    | Prisma.OrderProductsScalarWhereInput[];
};

export type OrderProductsCreateNestedManyWithoutOrderInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutOrderInput,
        Prisma.OrderProductsUncheckedCreateWithoutOrderInput
      >
    | Prisma.OrderProductsCreateWithoutOrderInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutOrderInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput[];
  createMany?: Prisma.OrderProductsCreateManyOrderInputEnvelope;
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
};

export type OrderProductsUncheckedCreateNestedManyWithoutOrderInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutOrderInput,
        Prisma.OrderProductsUncheckedCreateWithoutOrderInput
      >
    | Prisma.OrderProductsCreateWithoutOrderInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutOrderInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput[];
  createMany?: Prisma.OrderProductsCreateManyOrderInputEnvelope;
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
};

export type OrderProductsUpdateManyWithoutOrderNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutOrderInput,
        Prisma.OrderProductsUncheckedCreateWithoutOrderInput
      >
    | Prisma.OrderProductsCreateWithoutOrderInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutOrderInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput[];
  upsert?:
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutOrderInput
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutOrderInput[];
  createMany?: Prisma.OrderProductsCreateManyOrderInputEnvelope;
  set?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  disconnect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  delete?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  update?:
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutOrderInput
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutOrderInput[];
  updateMany?:
    | Prisma.OrderProductsUpdateManyWithWhereWithoutOrderInput
    | Prisma.OrderProductsUpdateManyWithWhereWithoutOrderInput[];
  deleteMany?:
    | Prisma.OrderProductsScalarWhereInput
    | Prisma.OrderProductsScalarWhereInput[];
};

export type OrderProductsUncheckedUpdateManyWithoutOrderNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.OrderProductsCreateWithoutOrderInput,
        Prisma.OrderProductsUncheckedCreateWithoutOrderInput
      >
    | Prisma.OrderProductsCreateWithoutOrderInput[]
    | Prisma.OrderProductsUncheckedCreateWithoutOrderInput[];
  connectOrCreate?:
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput
    | Prisma.OrderProductsCreateOrConnectWithoutOrderInput[];
  upsert?:
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutOrderInput
    | Prisma.OrderProductsUpsertWithWhereUniqueWithoutOrderInput[];
  createMany?: Prisma.OrderProductsCreateManyOrderInputEnvelope;
  set?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  disconnect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  delete?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  connect?:
    | Prisma.OrderProductsWhereUniqueInput
    | Prisma.OrderProductsWhereUniqueInput[];
  update?:
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutOrderInput
    | Prisma.OrderProductsUpdateWithWhereUniqueWithoutOrderInput[];
  updateMany?:
    | Prisma.OrderProductsUpdateManyWithWhereWithoutOrderInput
    | Prisma.OrderProductsUpdateManyWithWhereWithoutOrderInput[];
  deleteMany?:
    | Prisma.OrderProductsScalarWhereInput
    | Prisma.OrderProductsScalarWhereInput[];
};

export type OrderProductsCreateWithoutProductInput = {
  quantity: number;
  order: Prisma.OrderCreateNestedOneWithoutOrderProductsInput;
};

export type OrderProductsUncheckedCreateWithoutProductInput = {
  id?: number;
  orderId: number;
  quantity: number;
};

export type OrderProductsCreateOrConnectWithoutProductInput = {
  where: Prisma.OrderProductsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OrderProductsCreateWithoutProductInput,
    Prisma.OrderProductsUncheckedCreateWithoutProductInput
  >;
};

export type OrderProductsCreateManyProductInputEnvelope = {
  data:
    | Prisma.OrderProductsCreateManyProductInput
    | Prisma.OrderProductsCreateManyProductInput[];
  skipDuplicates?: boolean;
};

export type OrderProductsUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.OrderProductsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.OrderProductsUpdateWithoutProductInput,
    Prisma.OrderProductsUncheckedUpdateWithoutProductInput
  >;
  create: Prisma.XOR<
    Prisma.OrderProductsCreateWithoutProductInput,
    Prisma.OrderProductsUncheckedCreateWithoutProductInput
  >;
};

export type OrderProductsUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.OrderProductsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateWithoutProductInput,
    Prisma.OrderProductsUncheckedUpdateWithoutProductInput
  >;
};

export type OrderProductsUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.OrderProductsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateManyMutationInput,
    Prisma.OrderProductsUncheckedUpdateManyWithoutProductInput
  >;
};

export type OrderProductsScalarWhereInput = {
  AND?:
    | Prisma.OrderProductsScalarWhereInput
    | Prisma.OrderProductsScalarWhereInput[];
  OR?: Prisma.OrderProductsScalarWhereInput[];
  NOT?:
    | Prisma.OrderProductsScalarWhereInput
    | Prisma.OrderProductsScalarWhereInput[];
  id?: Prisma.IntFilter<"OrderProducts"> | number;
  orderId?: Prisma.IntFilter<"OrderProducts"> | number;
  productId?: Prisma.IntFilter<"OrderProducts"> | number;
  quantity?: Prisma.IntFilter<"OrderProducts"> | number;
};

export type OrderProductsCreateWithoutOrderInput = {
  quantity: number;
  product: Prisma.ProductCreateNestedOneWithoutOrderProductsInput;
};

export type OrderProductsUncheckedCreateWithoutOrderInput = {
  id?: number;
  productId: number;
  quantity: number;
};

export type OrderProductsCreateOrConnectWithoutOrderInput = {
  where: Prisma.OrderProductsWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.OrderProductsCreateWithoutOrderInput,
    Prisma.OrderProductsUncheckedCreateWithoutOrderInput
  >;
};

export type OrderProductsCreateManyOrderInputEnvelope = {
  data:
    | Prisma.OrderProductsCreateManyOrderInput
    | Prisma.OrderProductsCreateManyOrderInput[];
  skipDuplicates?: boolean;
};

export type OrderProductsUpsertWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderProductsWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.OrderProductsUpdateWithoutOrderInput,
    Prisma.OrderProductsUncheckedUpdateWithoutOrderInput
  >;
  create: Prisma.XOR<
    Prisma.OrderProductsCreateWithoutOrderInput,
    Prisma.OrderProductsUncheckedCreateWithoutOrderInput
  >;
};

export type OrderProductsUpdateWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderProductsWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateWithoutOrderInput,
    Prisma.OrderProductsUncheckedUpdateWithoutOrderInput
  >;
};

export type OrderProductsUpdateManyWithWhereWithoutOrderInput = {
  where: Prisma.OrderProductsScalarWhereInput;
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateManyMutationInput,
    Prisma.OrderProductsUncheckedUpdateManyWithoutOrderInput
  >;
};

export type OrderProductsCreateManyProductInput = {
  id?: number;
  orderId: number;
  quantity: number;
};

export type OrderProductsUpdateWithoutProductInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  order?: Prisma.OrderUpdateOneRequiredWithoutOrderProductsNestedInput;
};

export type OrderProductsUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  orderId?: Prisma.IntFieldUpdateOperationsInput | number;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  orderId?: Prisma.IntFieldUpdateOperationsInput | number;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsCreateManyOrderInput = {
  id?: number;
  productId: number;
  quantity: number;
};

export type OrderProductsUpdateWithoutOrderInput = {
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
  product?: Prisma.ProductUpdateOneRequiredWithoutOrderProductsNestedInput;
};

export type OrderProductsUncheckedUpdateWithoutOrderInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  productId?: Prisma.IntFieldUpdateOperationsInput | number;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsUncheckedUpdateManyWithoutOrderInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  productId?: Prisma.IntFieldUpdateOperationsInput | number;
  quantity?: Prisma.IntFieldUpdateOperationsInput | number;
};

export type OrderProductsSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    orderId?: boolean;
    productId?: boolean;
    quantity?: boolean;
    order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>;
    product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["orderProducts"]
>;

export type OrderProductsSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    orderId?: boolean;
    productId?: boolean;
    quantity?: boolean;
    order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>;
    product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["orderProducts"]
>;

export type OrderProductsSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    orderId?: boolean;
    productId?: boolean;
    quantity?: boolean;
    order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>;
    product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["orderProducts"]
>;

export type OrderProductsSelectScalar = {
  id?: boolean;
  orderId?: boolean;
  productId?: boolean;
  quantity?: boolean;
};

export type OrderProductsOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  "id" | "orderId" | "productId" | "quantity",
  ExtArgs["result"]["orderProducts"]
>;
export type OrderProductsInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>;
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>;
};
export type OrderProductsIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>;
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>;
};
export type OrderProductsIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>;
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>;
};

export type $OrderProductsPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "OrderProducts";
  objects: {
    order: Prisma.$OrderPayload<ExtArgs>;
    product: Prisma.$ProductPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      orderId: number;
      productId: number;
      quantity: number;
    },
    ExtArgs["result"]["orderProducts"]
  >;
  composites: {};
};

export type OrderProductsGetPayload<
  S extends boolean | null | undefined | OrderProductsDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$OrderProductsPayload, S>;

export type OrderProductsCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  OrderProductsFindManyArgs,
  "select" | "include" | "distinct" | "omit"
> & {
  select?: OrderProductsCountAggregateInputType | true;
};

export interface OrderProductsDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["OrderProducts"];
    meta: { name: "OrderProducts" };
  };
  /**
   * Find zero or one OrderProducts that matches the filter.
   * @param {OrderProductsFindUniqueArgs} args - Arguments to find a OrderProducts
   * @example
   * // Get one OrderProducts
   * const orderProducts = await prisma.orderProducts.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrderProductsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, OrderProductsFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one OrderProducts that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrderProductsFindUniqueOrThrowArgs} args - Arguments to find a OrderProducts
   * @example
   * // Get one OrderProducts
   * const orderProducts = await prisma.orderProducts.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrderProductsFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, OrderProductsFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OrderProducts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsFindFirstArgs} args - Arguments to find a OrderProducts
   * @example
   * // Get one OrderProducts
   * const orderProducts = await prisma.orderProducts.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrderProductsFindFirstArgs>(
    args?: Prisma.SelectSubset<T, OrderProductsFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first OrderProducts that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsFindFirstOrThrowArgs} args - Arguments to find a OrderProducts
   * @example
   * // Get one OrderProducts
   * const orderProducts = await prisma.orderProducts.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrderProductsFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, OrderProductsFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more OrderProducts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrderProducts
   * const orderProducts = await prisma.orderProducts.findMany()
   *
   * // Get first 10 OrderProducts
   * const orderProducts = await prisma.orderProducts.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const orderProductsWithIdOnly = await prisma.orderProducts.findMany({ select: { id: true } })
   *
   */
  findMany<T extends OrderProductsFindManyArgs>(
    args?: Prisma.SelectSubset<T, OrderProductsFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a OrderProducts.
   * @param {OrderProductsCreateArgs} args - Arguments to create a OrderProducts.
   * @example
   * // Create one OrderProducts
   * const OrderProducts = await prisma.orderProducts.create({
   *   data: {
   *     // ... data to create a OrderProducts
   *   }
   * })
   *
   */
  create<T extends OrderProductsCreateArgs>(
    args: Prisma.SelectSubset<T, OrderProductsCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many OrderProducts.
   * @param {OrderProductsCreateManyArgs} args - Arguments to create many OrderProducts.
   * @example
   * // Create many OrderProducts
   * const orderProducts = await prisma.orderProducts.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends OrderProductsCreateManyArgs>(
    args?: Prisma.SelectSubset<T, OrderProductsCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many OrderProducts and returns the data saved in the database.
   * @param {OrderProductsCreateManyAndReturnArgs} args - Arguments to create many OrderProducts.
   * @example
   * // Create many OrderProducts
   * const orderProducts = await prisma.orderProducts.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many OrderProducts and only return the `id`
   * const orderProductsWithIdOnly = await prisma.orderProducts.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends OrderProductsCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      OrderProductsCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a OrderProducts.
   * @param {OrderProductsDeleteArgs} args - Arguments to delete one OrderProducts.
   * @example
   * // Delete one OrderProducts
   * const OrderProducts = await prisma.orderProducts.delete({
   *   where: {
   *     // ... filter to delete one OrderProducts
   *   }
   * })
   *
   */
  delete<T extends OrderProductsDeleteArgs>(
    args: Prisma.SelectSubset<T, OrderProductsDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one OrderProducts.
   * @param {OrderProductsUpdateArgs} args - Arguments to update one OrderProducts.
   * @example
   * // Update one OrderProducts
   * const orderProducts = await prisma.orderProducts.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends OrderProductsUpdateArgs>(
    args: Prisma.SelectSubset<T, OrderProductsUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more OrderProducts.
   * @param {OrderProductsDeleteManyArgs} args - Arguments to filter OrderProducts to delete.
   * @example
   * // Delete a few OrderProducts
   * const { count } = await prisma.orderProducts.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends OrderProductsDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, OrderProductsDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrderProducts
   * const orderProducts = await prisma.orderProducts.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends OrderProductsUpdateManyArgs>(
    args: Prisma.SelectSubset<T, OrderProductsUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more OrderProducts and returns the data updated in the database.
   * @param {OrderProductsUpdateManyAndReturnArgs} args - Arguments to update many OrderProducts.
   * @example
   * // Update many OrderProducts
   * const orderProducts = await prisma.orderProducts.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more OrderProducts and only return the `id`
   * const orderProductsWithIdOnly = await prisma.orderProducts.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends OrderProductsUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, OrderProductsUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one OrderProducts.
   * @param {OrderProductsUpsertArgs} args - Arguments to update or create a OrderProducts.
   * @example
   * // Update or create a OrderProducts
   * const orderProducts = await prisma.orderProducts.upsert({
   *   create: {
   *     // ... data to create a OrderProducts
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrderProducts we want to update
   *   }
   * })
   */
  upsert<T extends OrderProductsUpsertArgs>(
    args: Prisma.SelectSubset<T, OrderProductsUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderProductsClient<
    runtime.Types.Result.GetResult<
      Prisma.$OrderProductsPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of OrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsCountArgs} args - Arguments to filter OrderProducts to count.
   * @example
   * // Count the number of OrderProducts
   * const count = await prisma.orderProducts.count({
   *   where: {
   *     // ... the filter for the OrderProducts we want to count
   *   }
   * })
   **/
  count<T extends OrderProductsCountArgs>(
    args?: Prisma.Subset<T, OrderProductsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<
            T["select"],
            OrderProductsCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a OrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends OrderProductsAggregateArgs>(
    args: Prisma.Subset<T, OrderProductsAggregateArgs>,
  ): Prisma.PrismaPromise<GetOrderProductsAggregateType<T>>;

  /**
   * Group by OrderProducts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderProductsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends OrderProductsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrderProductsGroupByArgs["orderBy"] }
      : { orderBy?: OrderProductsGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, OrderProductsGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetOrderProductsGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the OrderProducts model
   */
  readonly fields: OrderProductsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrderProducts.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrderProductsClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  order<T extends Prisma.OrderDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrderDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__OrderClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrderPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProductClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProductPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the OrderProducts model
 */
export interface OrderProductsFieldRefs {
  readonly id: Prisma.FieldRef<"OrderProducts", "Int">;
  readonly orderId: Prisma.FieldRef<"OrderProducts", "Int">;
  readonly productId: Prisma.FieldRef<"OrderProducts", "Int">;
  readonly quantity: Prisma.FieldRef<"OrderProducts", "Int">;
}

// Custom InputTypes
/**
 * OrderProducts findUnique
 */
export type OrderProductsFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * Filter, which OrderProducts to fetch.
   */
  where: Prisma.OrderProductsWhereUniqueInput;
};

/**
 * OrderProducts findUniqueOrThrow
 */
export type OrderProductsFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * Filter, which OrderProducts to fetch.
   */
  where: Prisma.OrderProductsWhereUniqueInput;
};

/**
 * OrderProducts findFirst
 */
export type OrderProductsFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * Filter, which OrderProducts to fetch.
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?:
    | Prisma.OrderProductsOrderByWithRelationInput
    | Prisma.OrderProductsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OrderProducts.
   */
  cursor?: Prisma.OrderProductsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrderProducts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OrderProducts.
   */
  distinct?:
    | Prisma.OrderProductsScalarFieldEnum
    | Prisma.OrderProductsScalarFieldEnum[];
};

/**
 * OrderProducts findFirstOrThrow
 */
export type OrderProductsFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * Filter, which OrderProducts to fetch.
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?:
    | Prisma.OrderProductsOrderByWithRelationInput
    | Prisma.OrderProductsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for OrderProducts.
   */
  cursor?: Prisma.OrderProductsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrderProducts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of OrderProducts.
   */
  distinct?:
    | Prisma.OrderProductsScalarFieldEnum
    | Prisma.OrderProductsScalarFieldEnum[];
};

/**
 * OrderProducts findMany
 */
export type OrderProductsFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * Filter, which OrderProducts to fetch.
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of OrderProducts to fetch.
   */
  orderBy?:
    | Prisma.OrderProductsOrderByWithRelationInput
    | Prisma.OrderProductsOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing OrderProducts.
   */
  cursor?: Prisma.OrderProductsWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` OrderProducts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` OrderProducts.
   */
  skip?: number;
  distinct?:
    | Prisma.OrderProductsScalarFieldEnum
    | Prisma.OrderProductsScalarFieldEnum[];
};

/**
 * OrderProducts create
 */
export type OrderProductsCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * The data needed to create a OrderProducts.
   */
  data: Prisma.XOR<
    Prisma.OrderProductsCreateInput,
    Prisma.OrderProductsUncheckedCreateInput
  >;
};

/**
 * OrderProducts createMany
 */
export type OrderProductsCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many OrderProducts.
   */
  data:
    | Prisma.OrderProductsCreateManyInput
    | Prisma.OrderProductsCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * OrderProducts createManyAndReturn
 */
export type OrderProductsCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * The data used to create many OrderProducts.
   */
  data:
    | Prisma.OrderProductsCreateManyInput
    | Prisma.OrderProductsCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * OrderProducts update
 */
export type OrderProductsUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * The data needed to update a OrderProducts.
   */
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateInput,
    Prisma.OrderProductsUncheckedUpdateInput
  >;
  /**
   * Choose, which OrderProducts to update.
   */
  where: Prisma.OrderProductsWhereUniqueInput;
};

/**
 * OrderProducts updateMany
 */
export type OrderProductsUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update OrderProducts.
   */
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateManyMutationInput,
    Prisma.OrderProductsUncheckedUpdateManyInput
  >;
  /**
   * Filter which OrderProducts to update
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * Limit how many OrderProducts to update.
   */
  limit?: number;
};

/**
 * OrderProducts updateManyAndReturn
 */
export type OrderProductsUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * The data used to update OrderProducts.
   */
  data: Prisma.XOR<
    Prisma.OrderProductsUpdateManyMutationInput,
    Prisma.OrderProductsUncheckedUpdateManyInput
  >;
  /**
   * Filter which OrderProducts to update
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * Limit how many OrderProducts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * OrderProducts upsert
 */
export type OrderProductsUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * The filter to search for the OrderProducts to update in case it exists.
   */
  where: Prisma.OrderProductsWhereUniqueInput;
  /**
   * In case the OrderProducts found by the `where` argument doesn't exist, create a new OrderProducts with this data.
   */
  create: Prisma.XOR<
    Prisma.OrderProductsCreateInput,
    Prisma.OrderProductsUncheckedCreateInput
  >;
  /**
   * In case the OrderProducts was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.OrderProductsUpdateInput,
    Prisma.OrderProductsUncheckedUpdateInput
  >;
};

/**
 * OrderProducts delete
 */
export type OrderProductsDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
  /**
   * Filter which OrderProducts to delete.
   */
  where: Prisma.OrderProductsWhereUniqueInput;
};

/**
 * OrderProducts deleteMany
 */
export type OrderProductsDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which OrderProducts to delete
   */
  where?: Prisma.OrderProductsWhereInput;
  /**
   * Limit how many OrderProducts to delete.
   */
  limit?: number;
};

/**
 * OrderProducts without action
 */
export type OrderProductsDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the OrderProducts
   */
  select?: Prisma.OrderProductsSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the OrderProducts
   */
  omit?: Prisma.OrderProductsOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderProductsInclude<ExtArgs> | null;
};
